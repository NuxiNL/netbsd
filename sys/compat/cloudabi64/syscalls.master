	$NetBSD$

; System call table for CloudABI.
;
; All system calls that do not use any machine-dependent data types are
; prefixed with|cloudabi_sys||. The others are called|cloudabi64_sys||.

#include <sys/param.h>
#include <sys/types.h>

#include <compat/cloudabi64/cloudabi64_syscalldefs.h>
#include <compat/cloudabi64/cloudabi64_syscallargs.h>

%%

0	STD	{ cloudabi_timestamp_t|cloudabi_sys||clock_res_get( \
		    cloudabi_clockid_t clock_id); }
1	STD	{ cloudabi_timestamp_t|cloudabi_sys||clock_time_get( \
		    cloudabi_clockid_t clock_id, \
		    cloudabi_timestamp_t precision); }

2	STD	{ void|cloudabi_sys||condvar_signal( \
		    cloudabi_condvar_t *condvar, \
		    cloudabi_mflags_t scope, \
		    cloudabi_nthreads_t nwaiters); }

3	STD	{ void|cloudabi_sys||fd_close( \
		    cloudabi_fd_t fd); }
4	STD	{ cloudabi_fd_t|cloudabi_sys||fd_create1( \
		    cloudabi_filetype_t type); }
5	STD	{ void|cloudabi_sys||fd_create2( \
		    cloudabi_filetype_t type); }
6	STD	{ void|cloudabi_sys||fd_datasync( \
		    cloudabi_fd_t fd); }
7	STD	{ cloudabi_fd_t|cloudabi_sys||fd_dup( \
		    cloudabi_fd_t from); }
8	STD	{ cloudabi64_size_t|cloudabi64_sys||fd_pread( \
		    cloudabi_fd_t fd, \
		    const cloudabi64_iovec_t *iov, \
		    cloudabi64_size_t iovcnt, \
		    cloudabi_filesize_t offset); }
9	STD	{ cloudabi64_size_t|cloudabi64_sys||fd_pwrite( \
		    cloudabi_fd_t fd, \
		    const cloudabi64_ciovec_t *iov, \
		    cloudabi64_size_t iovcnt, \
		    cloudabi_filesize_t offset); }
10	STD	{ cloudabi64_size_t|cloudabi64_sys||fd_read( \
		    cloudabi_fd_t fd, \
		    const cloudabi64_iovec_t *iov, \
		    cloudabi64_size_t iovcnt); }
11	STD	{ void|cloudabi_sys||fd_replace( \
		    cloudabi_fd_t from, \
		    cloudabi_fd_t to); }
12	STD	{ cloudabi_filesize_t|cloudabi_sys||fd_seek( \
		    cloudabi_fd_t fd, \
		    cloudabi_filedelta_t offset, \
		    cloudabi_whence_t whence); }
13	STD	{ void|cloudabi_sys||fd_stat_get( \
		    cloudabi_fd_t fd, \
		    cloudabi_fdstat_t *buf); }
14	STD	{ void|cloudabi_sys||fd_stat_put( \
		    cloudabi_fd_t fd, \
		    const cloudabi_fdstat_t *buf, \
		    cloudabi_fdsflags_t flags); }
15	STD	{ void|cloudabi_sys||fd_sync( \
		    cloudabi_fd_t fd); }
16	STD	{ cloudabi64_size_t|cloudabi64_sys||fd_write( \
		    cloudabi_fd_t fd, \
		    const cloudabi64_ciovec_t *iov, \
		    cloudabi64_size_t iovcnt); }

17	STD	{ void|cloudabi_sys||file_advise( \
		    cloudabi_fd_t fd, \
		    cloudabi_filesize_t offset, \
		    cloudabi_filesize_t len, \
		    cloudabi_advice_t advice); }
18	STD	{ void|cloudabi_sys||file_allocate( \
		    cloudabi_fd_t fd, \
		    cloudabi_filesize_t offset, \
		    cloudabi_filesize_t len); }
19	STD	{ void|cloudabi_sys||file_create( \
		    cloudabi_fd_t fd, \
		    const char *path, size_t pathlen, \
		    cloudabi_filetype_t type); }
20	STD	{ void|cloudabi_sys||file_link( \
		    cloudabi_lookup_t fd1, \
		    const char *path1, size_t path1len, \
		    cloudabi_fd_t fd2, \
		    const char *path2, size_t path2len); }
21	STD	{ cloudabi_fd_t|cloudabi_sys||file_open( \
		    cloudabi_lookup_t fd, \
		    const char *path, size_t pathlen, \
		    cloudabi_oflags_t oflags, \
		    const cloudabi_fdstat_t *fds); }
22	STD	{ size_t|cloudabi_sys||file_readdir( \
		    cloudabi_fd_t fd, \
		    void *buf, size_t nbyte, \
		    cloudabi_dircookie_t cookie); }
23	STD	{ size_t|cloudabi_sys||file_readlink( \
		    cloudabi_fd_t fd, \
		    const char *path, size_t pathlen, \
		    void *buf, size_t bufsize); }
24	STD	{ void|cloudabi_sys||file_rename( \
		    cloudabi_fd_t oldfd, \
		    const char *old, size_t oldlen, \
		    cloudabi_fd_t newfd, \
		    const char *new, size_t newlen); }
25	STD	{ void|cloudabi_sys||file_stat_fget( \
		    cloudabi_fd_t fd, \
		    cloudabi_filestat_t *buf); }
26	STD	{ void|cloudabi_sys||file_stat_fput( \
		    cloudabi_fd_t fd, \
		    const cloudabi_filestat_t *buf, \
		    cloudabi_fsflags_t flags); }
27	STD	{ void|cloudabi_sys||file_stat_get( \
		    cloudabi_lookup_t fd, \
		    const char *path, size_t pathlen, \
		    cloudabi_filestat_t *buf); }
28	STD	{ void|cloudabi_sys||file_stat_put( \
		    cloudabi_lookup_t fd, \
		    const char *path, size_t pathlen, \
		    const cloudabi_filestat_t *buf, \
		    cloudabi_fsflags_t flags); }
29	STD	{ void|cloudabi_sys||file_symlink( \
		    const char *path1, size_t path1len, \
		    cloudabi_fd_t fd, \
		    const char *path2, size_t path2len); }
30	STD	{ void|cloudabi_sys||file_unlink( \
		    cloudabi_fd_t fd, \
		    const char *path, size_t pathlen, \
		    cloudabi_ulflags_t flag); }

31	STD	{ void|cloudabi_sys||lock_unlock( \
		    cloudabi_lock_t *lock, \
		    cloudabi_mflags_t scope); }

32	STD	{ void|cloudabi_sys||mem_advise( \
		    void *addr, size_t len, \
		    cloudabi_advice_t advice); }
33	STD	{ void|cloudabi_sys||mem_lock( \
		    const void *addr, size_t len); }
34	STD	{ void|cloudabi_sys||mem_map( \
		    void *addr, size_t len, \
		    cloudabi_mprot_t prot, \
		    cloudabi_mflags_t flags, \
		    cloudabi_fd_t fd, \
		    cloudabi_filesize_t off); }
35	STD	{ void|cloudabi_sys||mem_protect( \
		    void *addr, size_t len, \
		    cloudabi_mprot_t prot); }
36	STD	{ void|cloudabi_sys||mem_sync( \
		    void *addr, size_t len, \
		    cloudabi_msflags_t flags); }
37	STD	{ void|cloudabi_sys||mem_unlock( \
		    const void *addr, size_t len); }
38	STD	{ void|cloudabi_sys||mem_unmap( \
		    void * addr, size_t len); }

39	STD	{ cloudabi64_size_t|cloudabi64_sys||poll( \
		    const cloudabi64_subscription_t *in, \
		    cloudabi64_event_t *out, \
		    cloudabi64_size_t nevents); }

40	STD	{ void|cloudabi_sys||proc_exec( \
		    cloudabi_fd_t fd, \
		    const void *data, \
		    size_t datalen, \
		    const cloudabi_fd_t *fds, \
		    size_t fdscnt); }
41	STD	{ void|cloudabi_sys||proc_exit( \
		    cloudabi_exitcode_t rval); }
42	STD	{ cloudabi_fd_t|cloudabi64_sys||proc_fork(); }
43	STD	{ void|cloudabi_sys||proc_raise( \
		    cloudabi_signal_t sig); }

44	STD	{ void|cloudabi_sys||random_get( \
		    void *buf, size_t nbyte); }

45	STD	{ cloudabi_fd_t|cloudabi_sys||sock_accept( \
		    cloudabi_fd_t s, \
		    cloudabi_sockstat_t *buf); }
46	STD	{ void|cloudabi_sys||sock_bind( \
		    cloudabi_fd_t s, cloudabi_fd_t fd, \
		    const char *path, size_t pathlen); }
47	STD	{ void|cloudabi_sys||sock_connect( \
		    cloudabi_fd_t s, cloudabi_fd_t fd, \
		    const char *path, size_t pathlen); }
48	STD	{ void|cloudabi_sys||sock_listen( \
		    cloudabi_fd_t s, \
		    cloudabi_backlog_t backlog); }
49	STD	{ cloudabi64_size_t|cloudabi64_sys||sock_recv( \
		    cloudabi_fd_t s, \
		    const cloudabi64_recv_in_t *in, \
		    cloudabi64_recv_out_t *out); }
50	STD	{ cloudabi64_size_t|cloudabi64_sys||sock_send( \
		    cloudabi_fd_t s, \
		    const cloudabi64_send_in_t *in, \
		    cloudabi64_send_out_t *out); }
51	STD	{ void|cloudabi_sys||sock_shutdown( \
		    cloudabi_fd_t fd, \
		    cloudabi_sdflags_t how); }
52	STD	{ void|cloudabi_sys||sock_stat_get( \
		    cloudabi_fd_t fd, \
		    cloudabi_sockstat_t *buf, \
		    cloudabi_ssflags_t flags); }

53	STD	{ cloudabi_tid_t|cloudabi64_sys||thread_create( \
		    cloudabi64_threadattr_t *attr); }
54	STD	{ void|cloudabi_sys||thread_exit( \
		    cloudabi_lock_t *lock, \
		    cloudabi_mflags_t scope); }
55	STD	{ void|cloudabi64_sys||thread_tcb_set( \
		    void *tcb); }
56	STD	{ void|cloudabi_sys||thread_yield(); }

57	STD	{ cloudabi64_size_t|cloudabi64_sys||poll_fd( \
		    cloudabi_fd_t fd, \
		    const cloudabi64_subscription_t *in, \
		    cloudabi64_size_t nin, \
		    cloudabi64_event_t *out, \
		    cloudabi64_size_t nout, \
		    const cloudabi64_subscription_t *timeout); }
